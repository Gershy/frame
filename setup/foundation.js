(() => {
  
  let { Src, FnSrc, Tmp, Slots } = U.logic;
  
  let Keep = U.form({ name: 'Keep', has: { Slots }, props: (insp, Insp) => ({
    init: function() {},
    getContent: C.noFn('getContent'),
    setContent: C.noFn('setContent'),
    getContentType: C.noFn('getContentType'),
    getContentByteLength: C.noFn('getContentByteLength'),
    getPipe: C.noFn('getPipe'),
    desc: C.noFn('desc')
  })});
  U.setup.gain({ Keep });
  
  // TODO: Merge `U` and `Foundation`??
  let Foundation = U.form({ name: 'Foundation', has: { Slots }, props: (forms, Form) => ({
    
    $protocols: {
      http: { secure: false, defaultPort: 80 },
      https: { secure: true, defaultPort: 443 },
      ws: { secure: false, defaultPort: 80 },
      wss: { secure: true, defaultPort: 443 }
    },
    
    // Initialization
    init: function(args={}) {
      
      global.foundation = this;
      
      /// if (!args.has('ssl')) args.ssl = null;
      
      this.origArgs = args;
      this.readyArgs = {};
      this.initData = args.seek('initData').val || null; // TODO: Clumsy! I think the FoundationBrowser script generated by Nodejs (in hinterlands/habitat/htmlBrowser) should include code to process "initData".
      
      this.uidCnt = 0;
      this.installedRooms = {};
      this.servers = {};
      
      this.hutPrm = null;
      this.keepPrm = null;
      this.realPrm = null;
      
    },
    halt: function() { throw Error(`Foundation halted`); },
    ready: function() { return Promise.resolve(); },
    
    // Sandbox
    getMs: function() { return +new Date(); },
    queueTask: C.noFn('queueTask'),
    getUid: function() { return (this.uidCnt++).encodeStr(C.base62, 8); },
    
    // Config
    getArg: function(term) {
      if (!this.readyArgs.has(term)) {
        
        // TODO: should seek should return `C.skip` if `!found`?? I
        // think it makes some cases more convenient, others less. Also
        // consider??:
        // `{ found: <bool>, val: <val|null>, res: <val|C.skip> }`
        let rawVal = this.origArgs.seek(term).val;
        this.readyArgs[term] = this.argProcessors.has(term)
          ? this.argProcessors[term](rawVal, this)
          : rawVal;
        
        U.then(this.readyArgs[term], arg => this.readyArgs[term] = arg);
        
      }
      return this.readyArgs[term];
    },
    parseUrl: function(url) {
      let [ full, protocol, host, port=null, path='/', query='' ] = url.match(/^([^:]+):\/\/([^:?/]+)(?::([0-9]+))?(\/[^?]*)?(?:\?(.+))?/);
      
      if (!Form.protocols.has(protocol)) throw Error(`Invalid protocol: "${protocol}"`);
      
      if (!path.hasHead('/')) path = `/${path}`;
      if (!port) port = Form.protocols[protocol].defaultPort;
      
      return {
        protocol, host, port: parseInt(port, 10), path,
        query: (query ? query.split('&') : []).toObj(pc => pc.has('=') ? pc.cut('=', 1) : [ pc, null ])
      };
      
    },
    argProcessors: {
      deploy: val => val || 'prod',
      debug: val => {
        if (val === '*') return { has: () => true };
        if (U.isForm(val, String)) val = val.split(',').map(v => v.trim() || C.skip);
        return Set(val || []);
      },
      roadDebugLimit: val => val || Infinity
    },
    formatHostUrl: function({ protocol, host, port }) {
      let excludePort = true
        && Form.protocols.has(protocol)
        && port === Form.protocols[protocol].defaultPort;
      return `${protocol}://${host}${excludePort ? '' : (':' + port)}`;
    },
    
    // Services
    access: function(arg) {
      if (!U.isForm(arg, String)) throw Error(`Invalid type for access: ${U.getFormName(arg)}`);
      if (arg === 'hut') return this.getRootHut();
      if (arg === 'keep') return this.getRootKeep();
      if (arg === 'real') return this.getRootReal();
      return null;
    },
    getRootHut: function(options={}) { return this.hutPrm = (this.hutPrm || this.createHut(options)); },
    getRootKeep: function(options={}) { return this.keepPrm = (this.keepPrm || this.createKeep(options)); },
    getRootReal: function(options={}) { return this.realPrm = (this.realPrm || this.createReal(options)); },
    createHut: async function(uid) {
      
      // Note: An instance of node could have multiple RootHuts, each
      // representing a server with a variety of Roads, and different
      // servers could host entirely different applications - all within
      // the same node VM context!
      
      // if (!options.has('uid')) throw Error('Must provide "uid"');
      
      // Ensure good defaults inside `options`:
      
      /// // SSL:
      /// if (!options.hosting.sslArgs) options.hosting.sslArgs = {};
      /// if (!options.hosting.sslArgs.has('keyPair')) options.hosting.sslArgs.keyPair = null;
      /// if (!options.hosting.sslArgs.has('selfSign')) options.hosting.sslArgs.selfSign = null;
      /// 
      /// // Protocols:
      /// if (!options.has('protocols')) options.protocols = {};
      /// if (!options.protocols.has('http')) options.protocols.http = true;
      /// if (!options.protocols.has('sokt')) options.protocols.sokt = true;
      /// 
      /// // Heartbeat:
      /// if (!options.has('heartMs')) options.heartMs = 1000 * 30;
      
      return (await this.getRoom('hinterlands')).Hut(this, uid);
      
    },
    createKeep: C.noFn('createKeep'),
    createReal: C.noFn('createReal'),
    
    // Transport
    getServer: function(opts) {
      
      // Returns either an immediate value or a Promise. Immediate
      // server availability is important to allow efficient setup of
      // some clients.
      
      let term = this.formatHostUrl(opts);
      if (!this.servers.has(term)) {
        
        this.servers[term] = ({
          http:   this.createHttpServer,
          sokt:   this.createSoktServer,
          ws:     this.createSoktServer
        })[opts.protocol].call(this, opts);
        U.then(this.servers[term], server => this.servers[term] = server);
        
      }
      return this.servers[term];
      
    },
    createHttpServer: C.noFn('createHttpServer', opts => {}),
    createSoktServer: C.noFn('createSoktServer', opts => {}),
    
    // Room
    getRooms: function(roomNames, { shorten=true, ...opts }={}) {
      
      // Return an Object which maps every name in the Array `roomNames`
      // to a Promise; this Promise will resolve to the result of
      // running the function defined by the room for that name. Note
      // that compilation and minification layers are likely to apply.
      // Handles recursion (where requested rooms have further
      // dependencies) and even circular recursion (where a requested
      // room eventually requires, a room already part of the request).
      
      let rooms = roomNames.toObj(name => {
        
        let keyName = shorten ? name.split('.').slice(-1)[0] : name;
        
        // Prexisting Promise or resolved values are returned
        if (this.installedRooms.has(name)) return [ keyName, this.installedRooms[name].content ];
        
        // Unresolved promise representing room installation
        let installPrm = this.installRoom(name, opts);
        
        // Immediately set key; prevents double-installation
        this.installedRooms[name] = { debug: { offsets: [] }, content: installPrm.then(v => v.content) };
        
        // Note `Foundation.prototype.installRoom` returns a Promise
        // resolving to an Object with "debug" and "content" properties.
        // Note "debug" is immediately available, while "content" may be
        // another Promise. This is to allow debug information to be
        // available for any SyntaxErrors that can occur during the
        // resolution of the "content" property.
        installPrm.then(({ debug, content }) => {
          Object.assign(this.installedRooms[name], { debug });
          Promise.resolve(content).then(content => Object.assign(this.installedRooms[name], { content }));
        });
        
        return [ keyName, this.installedRooms[name].content ];
        
      });
      
      // Return immediately-available result if all rooms are loaded,
      // otherwise need to use `Promise.allObj`
      return rooms.find(content => U.isForm(content, Promise)).found ? Promise.allObj(rooms) : rooms;
      
    },
    getRoom: async function(roomName, { ...opts }={}) {
      
      // Uses `Foundation.prototype.getRooms` to return a single room
      return (await this.getRooms([ roomName ], { shorten: false, ...opts }))[roomName];
      
    },
    settleRoom: async function(name, { bearing, ...opts }={}) {
      
      await this.ready();
      
      // The settled room gets its Hut linked to static resources
      // TODO: Move to hinterlands.Setup?
      let hut = await this.getRootHut({ heartMs: 1000 * 40 });
      this.seek('keep', 'static').setHut(hut);
      
      let room = await this.getRoom(name, bearing);
      return room.open(hut);
      
    },
    installRoom: function(name, bearing) {
      
      // Returns an Object with "debug" and "content" properties. The
      // "debug" property must be immediately available, and represent
      // a mapping between compiled and source codepoints; this if for
      // use with stack traces. The "content" property may be a Promise
      // and should resolve eventually to the result of calling the
      // function defined under `global.rooms[name]`. This function is
      // called by both `Foundation.prototype.getRoom` and
      // `Foundation.prototype.getRooms`, allowing import of source code
      // defined in other files, along with the data needed to display
      // good stack traces.
      
      return C.noFn('installRoom').call(this, name, bearing);
      
    },
    
    /// {DEBUG=
    // Error
    parseErrorLine: C.noFn('parseErrorLine'),
    srcLineRegex: C.noFn('srcLineRegex', () => ({ regex: /.^/, extract: fullMatch => ({ roomName: '...', line: '...', char: '...' }) })),
    cmpLineToSrcLine: function(offsets, cmpLine, cmpChar=null) {
      
      // For a compiled file and line number, return the corresponding line number
      // in the source
      
      let context = {}; // Context can accumulate as we iterate through the offsets
      let srcLine = 0; // The line of code in the source which maps to the line of compiled code
      let nextOffset = 0; // The index of the next offset chunk which may take effect
      for (let i = 0; i < cmpLine; i++) {
        
        // Find all the offsets which exist for the source line
        // For each offset increment the line in the source file
        while (offsets[nextOffset] && offsets[nextOffset].at === srcLine) {
          Object.assign(context, offsets[nextOffset]);
          srcLine += offsets[nextOffset].offset;
          nextOffset++;
        }
        srcLine++;
        
      }
      
      return { context, line: srcLine };
      
    },
    cmpRoomLineToSrcLine: function(roomName, cmpLine, cmpChar=null) {
      
      let offsets = null
        || this.installedRooms.seek([ roomName, 'debug', 'offsets' ]).val
        || (global.roomDebug || {}).seek([ roomName, 'offsets' ]).val;
      
      let result = { name: roomName, disp: null, mapped: false, srcLine: cmpLine };
      
      if (offsets) {
        let { context, line } = this.cmpLineToSrcLine(offsets, cmpLine, cmpChar);
        if (context.has('roomName')) result.name = context.roomName;
        result.srcLine = line;
        result.mapped = true;
      }
      
      return result.gain({ disp: `${result.name}.${result.mapped ? 'cmp' : 'src'} @ ${result.srcLine.toString()}` });
    },
    formatError: function(err, verbose=false) {
      
      // Form a pretty representation of an error. Remove noise from filepaths
      // and map line indices from compiled->source.
      
      let [ msg, type, stack, diagram ] = [ err.message, U.getFormName(err), err.stack, null ];
      let traceBegins=null, errDescContent=null;
      
      // SyntaxErrors begin with a physical diagram of the line the
      // error occurred on. SyntaxErrors also do not include any
      // overridden message in their stack (If regular Error `err` and
      // SyntaxError `synErr`, for  `err.message += '!'`
      // and `synErr.message += '!'`, the "!" appears in `err.stack`,
      // but not in `synErr.stack`). This is a nuisance since it makes
      // it difficult to detect when the "trace" component of the stack
      // begins - we can't just slice off `msg.count()` characters as
      // some characters of the "error message" can be reflected in
      // `msg` but not `err.stack`. Fortunately for SyntaxErrors the
      // "message" component of the stack will only be a single line!
      // TODO: This isn't necessarily cross-brower compatible!
      if (U.isForm(err, SyntaxError)) {
        
        if (!stack.has('\n\n')) stack = `(Unknown error)\n\n${stack}`;
        
        [ diagram, stack ] = stack.cut('\n\n', 1);
        traceBegins = stack.cut('\n')[0].count() + 1; // +1 accounts for newline
        errDescContent = diagram + '\n' + stack.slice(0, traceBegins - 1); // 0 could become `U.getFormName(err).count + 2` to trim off "SyntaxError: "
      } else {
        let prefix = `${type}: ${msg}\n`;
        traceBegins = stack.indexOf(prefix) + prefix.length;
        errDescContent = stack.slice(0, traceBegins - 1);
      }
      
      let trace = stack.slice(traceBegins);
      let lines = trace.split('\n').map(line => {
        let parseCmpLine = U.safe(() => this.parseErrorLine(line), null);
        if (!parseCmpLine) return verbose ? `?(1) - ${line.trim()}` : C.skip;
        
        let { roomName, lineInd, charInd, bearing } = parseCmpLine;
        if (bearing === null) return `${roomName}.src @ ${lineInd}`;
        
        let result = U.safe(() => this.cmpRoomLineToSrcLine(roomName, lineInd, charInd).disp, null);
        return result || (verbose ? `?(2) - mill//${roomName}.js @ ${lineInd} (${line.trim()})` : C.skip);
      });
      
      let { regex, extract } = this.srcLineRegex();
      let moreLines = errDescContent.replace(regex, fullMatch => {
        let { roomName, lineInd, charInd=null } = extract(fullMatch);
        return this.cmpRoomLineToSrcLine(roomName, lineInd, charInd).disp;
      }).split('\n');
      
      let result = [
        '='.repeat(46),
        ...moreLines.map(ln => `||  ${ln}`),
        '||' + ' -'.repeat(22),
        ...(lines.isEmpty()
          ? [ `Showing unformatted "${type}":`, ...trace.split('\n').map(ln => `? ${ln.trim()}`) ]
          : lines
        ).map(ln => `||  ${ln}`)
      ].join('\n');
      
      return result;
      
    }
    /// =DEBUG}
    
  })});
  U.setup.gain({ Foundation });
  
})();
