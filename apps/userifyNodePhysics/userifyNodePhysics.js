var package = new PACK.pack.Package({ name: 'userifyNodePhysics',
  dependencies: [ 'userify', 'geom' ], 
  buildFunc: function(packageName, uf, geom) {
    
    var Point = geom.Point;
    
    return {
      NodePhysicsDecorator: U.makeClass({ name: 'NodePhysicsDecorator',
        superclass: uf.Decorator,
        methods: function(sc, c) { return {
          init: function(params /* data, maxUpdatesPerFrame */) {
            sc.init.call(this, params);
            
            this.data = U.param(params, 'data');
            
            var physicsSettings = U.param(params, 'physicsSettings', {});
            this.physicsSettings = {
              scaleTime: 1,
              dampenGlobal: 0.99,
              gravityPow: 2,
              gravityMult: 1 / 100,
              separation: 20,
              centerAclMag: 10,
              minVel: 0
            }.update(physicsSettings);
            
            this.maxUpdatesPerFrame = U.param(params, 'maxUpdatesPerFrame', 1000);
            this.updateIndex = 0;
          },
          update: function(view, millis) {
            
            var ps = this.physicsSettings;
            var secs = millis * 0.001 * ps.scaleTime;
            
            var cs = this.data.getValue().toArray();
            var ncs = cs.length;
            var mncs = Math.min(ncs, this.maxUpdatesPerFrame);
            
            for (var n = 0; n < mncs; n++) {
              
              var i = this.updateIndex;
              this.updateIndex = (++this.updateIndex >= cs.length) ? 0 : this.updateIndex;
              
              var phys1 = cs[i].physics;
              var loc1 = phys1.loc.getValue();
              var r1 = phys1.r.getValue();
              var w1 = phys1.weight.getValue();
              
              // Dampen velocity
              phys1.vel = phys1.vel.scale(ps.dampenGlobal);
              
              // Increment location based on velocity
              loc1 = loc1.add(phys1.vel.scale(secs));
              
              // Increment velocity based on acceleration
              phys1.vel = phys1.vel.add(phys1.acl.scale(secs));
              
              if (phys1.vel.magSqr() < (ps.minVel * ps.minVel)) phys1.vel = PACK.geom.ORIGIN;
              
              // Reset acceleration
              phys1.acl = new Point({
                ang: loc1.angleTo(geom.ORIGIN),
                mag: ps.centerAclMag
              });
              
              for (var j = 0; j < ncs; j++) {
                if (i === j) continue;
                
                var phys2 = cs[j].physics;
                var loc2 = phys2.loc.getValue();
                var r2 = phys2.r.getValue();
                var w2 = phys2.weight.getValue();
                
                var sepDist = r1 + r2 + ps.separation;
                var dist = loc1.dist(loc2);
                var gap = dist - sepDist;
                
                // Look out for division by 0
                var denom = (Math.max(Math.pow(dist, ps.gravityPow), 1) * r1 * w1);
                if (denom)
                  phys1.acl = phys1.acl.add(new Point({
                    ang: loc1.angleTo(loc2),
                    mag: (ps.gravityMult * ps.gravityMult * r2 * w2) / denom
                  }));
                
                if (gap < 0 && w1 <= w2) { // The lighter node always moves out of the way for the heavier node
                  
                  loc1 = loc2.angleMove(loc2.angleTo(loc1), sepDist);
                  
                }
                
              }
              
              phys1.loc.setValue(loc1);
              
            }
            
          }
        };}
      })
    };
    
  }
});
package.build();


var arr = [





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































]
